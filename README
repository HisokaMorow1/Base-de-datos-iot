# Gestor de Dispositivos IoT con SQLAlchemy y Alembic

## Descripción

Este proyecto implementa un sistema backend para la gestión de dispositivos IoT, sensores y sus lecturas, utilizando SQLAlchemy como ORM y Alembic para el control de versiones del esquema de base de datos. Permite registrar dispositivos, agruparlos, gestionar sensores, almacenar lecturas y mantener logs de estado.

---

## Estructura del Proyecto

```
Base de datos iot/
│
├── alembic/                # Migraciones de Alembic
│   └── versions/           # Scripts de migración generados
├── app/
│   ├── __init__.py
│   ├── crud.py             # Funciones CRUD
│   ├── database.py         # Configuración de la base de datos
│   ├── main.py             # Script de ejemplo de uso
│   └── models.py           # Modelos SQLAlchemy
├── alembic.ini             # Configuración de Alembic
├── dump.sql                # Dump de la base de datos
├── pyproject.toml          # Dependencias del proyecto
├── .python-version         # Versión de Python usada
├── uv.lock                 # Lockfile de dependencias
└── README.md               # Este archivo
```

---

## Instalación y Configuración

### 1. Clonar el repositorio

```bash
git clone <https://github.com/HisokaMorow1/Base-de-datos-iot>
cd Base de datos Iot
```

### 2. Crear y activar un entorno virtual

```bash
python3 -m venv venv
source venv/bin/activate
```

### 3. Instalar las dependencias

```bash
uv pip install -r pyproject.toml
```

Asegúrate de tener instalados:
- SQLAlchemy
- Alembic
- psycopg2-binary

### 4. Configurar la base de datos PostgreSQL

Crea una base de datos y un usuario en PostgreSQL:

```bash
sudo -i -u postgres
psql
CREATE DATABASE iot_db;
CREATE USER iot_user WITH PASSWORD 'admin';
GRANT ALL PRIVILEGES ON DATABASE iot_db TO iot_user;
\q
exit
```

Asegúrate de que la URL de conexión en `alembic.ini` y `app/database.py` sea:

```
postgresql+psycopg2://iot_user:admin@localhost:5432/iot_db
```

---

## Migraciones de Base de Datos

### 1. Generar la migración inicial (ya incluida)

```bash
alembic revision --autogenerate -m "Initial schema"
```

### 2. Aplicar las migraciones

```bash
alembic upgrade head
```

---

## Restaurar la base de datos desde el dump

Si necesitas restaurar la base de datos a partir del dump:

```bash
PGPASSWORD=admin psql -U iot_user -h localhost -d iot_db < dump.sql
```

---

## Uso del sistema

Puedes ejecutar el script de ejemplo para probar las operaciones CRUD:

```bash
python3 -m app.main
```

Esto demostrará la creación de tipos de dispositivos, grupos, dispositivos, sensores, lecturas y logs de estado.

---

## Modificaciones de Esquema

- Se añadió la columna `umbral_alerta` a `Sensor`.
- Se añadió la columna `estado_actual` a `Dispositivo` para acceso rápido al estado.
- Se renombró `ubicacion` a `descripcion_ubicacion` y se añadió `coordenadas_gps` a `Dispositivo`.

---

## Dependencias

Incluidas en `pyproject.toml`:
- SQLAlchemy
- Alembic
- psycopg2-binary
